import React, { useEffect, useState } from 'react';
import axios from 'axios';
import {
  Box, Button, Container, Dialog, DialogActions, DialogContent,
  DialogTitle, TextField, Typography, Table, TableBody,
  TableCell, TableHead, TableRow
} from '@mui/material';

function OrderList() {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [open, setOpen] = useState(false);
  const [editingOrder, setEditingOrder] = useState(null);
  const [form, setForm] = useState({
    id: '',
    userId: '',
    productId: '',
    status: ''
  });

  const fetchOrders = async () => {
    setLoading(true);
    try {
      const response = await axios.get('http://localhost:4000/orders');
      setOrders(response.data);
      setError(null);
    } catch (err) {
      setError('Failed to fetch orders');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchOrders();
  }, []);

  const handleOpen = (order = null) => {
    if (order) {
      setEditingOrder(order);
      setForm({
        id: order.id,
        userId: order.userId,
        productId: order.productId,
        status: order.status
      });
    } else {
      setEditingOrder(null);
      setForm({
        id: '',
        userId: '',
        productId: '',
        status: ''
      });
    }
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setError(null);
  };

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async () => {
    if (!form.id || !form.userId || !form.productId || !form.status) {
      setError('All fields are required');
      return;
    }
    try {
      if (editingOrder) {
        await axios.put(`http://localhost:4000/orders/${form.id}`, {
          id: parseInt(form.id),
          userId: parseInt(form.userId),
          productId: parseInt(form.productId),
          status: form.status,
        });
      } else {
        await axios.post('http://localhost:4000/orders', {
          id: parseInt(form.id),
          userId: parseInt(form.userId),
          productId: parseInt(form.productId),
          status: form.status,
        });
      }
      fetchOrders();
      handleClose();
    } catch (err) {
      setError('Failed to save order');
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this order?')) return;
    try {
      await axios.delete(`http://localhost:4000/orders/${id}`);
      fetchOrders();
    } catch (err) {
      alert('Failed to delete order');
    }
  };

  return (
    <Container>
      <Box my={4}>
        <Typography variant="h4" gutterBottom>Order Management</Typography>
        <Button variant="contained" color="primary" onClick={() => handleOpen()}>
          Add New Order
        </Button>
        {loading ? (
          <Typography>Loading orders...</Typography>
        ) : error ? (
          <Typography color="error">{error}</Typography>
        ) : (
          <Table sx={{ mt: 2 }}>
            <TableHead>
              <TableRow>
                <TableCell>ID</TableCell>
                <TableCell>User ID</TableCell>
                <TableCell>Product ID</TableCell>
                <TableCell>Status</TableCell>
                <TableCell>Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {orders.map((order) => (
                <TableRow key={order.id}>
                  <TableCell>{order.id}</TableCell>
                  <TableCell>{order.userId}</TableCell>
                  <TableCell>{order.productId}</TableCell>
                  <TableCell>{order.status}</TableCell>
                  <TableCell>
                    <Button size="small" onClick={() => handleOpen(order)}>Edit</Button>
                    <Button size="small" color="error" onClick={() => handleDelete(order.id)}>Delete</Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        )}
        <Dialog open={open} onClose={handleClose}>
          <DialogTitle>{editingOrder ? 'Edit Order' : 'Add New Order'}</DialogTitle>
          <DialogContent>
            {error && <Typography color="error">{error}</Typography>}
            <TextField
              autoFocus
              margin="dense"
              label="ID"
              name="id"
              fullWidth
              disabled={!!editingOrder}
              value={form.id}
              onChange={handleChange}
            />
            <TextField
              margin="dense"
              label="User ID"
              name="userId"
              type="number"
              fullWidth
              value={form.userId}
              onChange={handleChange}
            />
            <TextField
              margin="dense"
              label="Product ID"
              name="productId"
              type="number"
              fullWidth
              value={form.productId}
              onChange={handleChange}
            />
            <TextField
              margin="dense"
              label="Status"
              name="status"
              fullWidth
              value={form.status}
              onChange={handleChange}
            />
          </DialogContent>
          <DialogActions>
            <Button onClick={handleClose}>Cancel</Button>
            <Button onClick={handleSubmit} variant="contained" color="primary">
              {editingOrder ? 'Update' : 'Create'}
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </Container>
  );
}

export default OrderList;

