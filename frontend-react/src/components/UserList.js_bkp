import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { 
  Box, Button, Container, Dialog, DialogActions, DialogContent, 
  DialogTitle, TextField, Typography, Table, TableBody, 
  TableCell, TableHead, TableRow 
} from '@mui/material';

function UserList() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const [open, setOpen] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [form, setForm] = useState({ id: '', name: '', email: '' });

  const fetchUsers = async () => {
    setLoading(true);
    try {
      const response = await axios.get('http://localhost:8000/users');
      setUsers(response.data);
      setError(null);
    } catch (err) {
      setError('Failed to fetch users');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  const handleOpen = (user = null) => {
    if (user) {
      setEditingUser(user);
      setForm({ id: user.id, name: user.name, email: user.email });
    } else {
      setEditingUser(null);
      setForm({ id: '', name: '', email: '' });
    }
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setError(null);
  };

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async () => {
    if (!form.id || !form.name || !form.email) {
      setError('All fields are required');
      return;
    }

    try {
      if (editingUser) {
        await axios.put(`http://localhost:8000/users/${form.id}`, form);
      } else {
        await axios.post('http://localhost:8000/users', form);
      }
      fetchUsers();
      handleClose();
    } catch (err) {
      setError('Failed to save user');
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this user?')) return;
    try {
      await axios.delete(`http://localhost:8000/users/${id}`);
      fetchUsers();
    } catch (err) {
      alert('Failed to delete user');
    }
  };

  return (
    <Container>
      <Box my={4}>
        <Typography variant="h4" gutterBottom>User Management</Typography>
        <Button variant="contained" color="primary" onClick={() => handleOpen()}>
          Add New User
        </Button>

        {loading ? (
          <Typography>Loading users...</Typography>
        ) : error ? (
          <Typography color="error">{error}</Typography>
        ) : (
          <Table sx={{ mt: 2 }}>
            <TableHead>
              <TableRow>
                <TableCell>ID</TableCell>
                <TableCell>Name</TableCell>
                <TableCell>Email</TableCell>
                <TableCell>Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {users.map((user) => (
                <TableRow key={user.id}>
                  <TableCell>{user.id}</TableCell>
                  <TableCell>{user.name}</TableCell>
                  <TableCell>{user.email}</TableCell>
                  <TableCell>
                    <Button size="small" onClick={() => handleOpen(user)}>Edit</Button>
                    <Button size="small" color="error" onClick={() => handleDelete(user.id)}>Delete</Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        )}

        <Dialog open={open} onClose={handleClose}>
          <DialogTitle>{editingUser ? 'Edit User' : 'Add New User'}</DialogTitle>
          <DialogContent>
            {error && <Typography color="error">{error}</Typography>}
            <TextField
              autoFocus
              margin="dense"
              label="ID"
              name="id"
              fullWidth
              disabled={!!editingUser}
              value={form.id}
              onChange={handleChange}
            />
            <TextField
              margin="dense"
              label="Name"
              name="name"
              fullWidth
              value={form.name}
              onChange={handleChange}
            />
            <TextField
              margin="dense"
              label="Email"
              name="email"
              fullWidth
              value={form.email}
              onChange={handleChange}
            />
          </DialogContent>
          <DialogActions>
            <Button onClick={handleClose}>Cancel</Button>
            <Button onClick={handleSubmit} variant="contained" color="primary">
              {editingUser ? 'Update' : 'Create'}
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </Container>
  );
}

export default UserList;

